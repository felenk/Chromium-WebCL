/*
* Copyright (C) 2011 Samsung Electronics Corporation. All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided the following conditions
* are met:
* 
* 1.  Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
* 
* 2.  Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
* 
* THIS SOFTWARE IS PROVIDED BY SAMSUNG ELECTRONICS CORPORATION AND ITS
* CONTRIBUTORS "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
* BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SAMSUNG
* ELECTRONICS CORPORATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS, OR BUSINESS INTERRUPTION), HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
* NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


	 [
		Conditional=WEBCL,
	] interface WebCLContext {
	[StrictTypeChecking, Custom,RaisesException]  void getInfo ( long contextinfo);		
	
	[RaisesException] WebCLEvent createUserEvent();		

	[RaisesException] WebCLCommandQueue createCommandQueue(optional WebCLDeviceList devices, 
				optional long prop);



	//WebCLCommandQueue createCommandQueue(in WebCLDevice devices, 
	//			in long prop) raises(DOMException);
	[RaisesException] WebCLProgram createProgram( DOMString kernelSource);
	[RaisesException] WebCLMem createBuffer( long flags, long size,  long host_ptr);			
	[RaisesException] WebCLSampler createSampler( boolean normCords,  long addrMode,
			 long fltrMode);	
	[RaisesException] void releaseCL();				
	[RaisesException] WebCLMem createImage2D( long flags, 
				 HTMLCanvasElement canvasElement);
	[RaisesException] WebCLMem createImage2D( long flags, 
				 HTMLImageElement imageElement);
	[RaisesException] WebCLMem createImage2D( long flags, 
				 HTMLVideoElement videoElement);
	[RaisesException] WebCLMem createImage2D( long flags, 
				 ImageData data);
	[RaisesException] WebCLMem createImage2D( long flags,
				 unsigned long width,
				 unsigned long height,
				 ArrayBuffer data);
	[RaisesException] WebCLMem createImage3D( long flags,
				 unsigned long width,
				 unsigned long height,
				 unsigned long depth,
				 ArrayBuffer data);
	[RaisesException] WebCLMem createFromGLBuffer( long flags,
				 WebGLBuffer bufobj);
	[RaisesException] WebCLImage createFromGLRenderBuffer( long flags, 
                 WebGLRenderbuffer renderbufferobj);
	[RaisesException] WebCLMem createFromGLTexture2D( long flags,
				 unsigned long textureTarget,
				 long miplevel,
				 unsigned long texture);
	
	
	};

